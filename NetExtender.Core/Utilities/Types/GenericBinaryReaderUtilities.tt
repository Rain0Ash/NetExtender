<#@ template language="C#v3.5" #>
<#@ output extension=".cs" encoding="utf-8"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.CompilerServices;

namespace NetExtender.Utilities.Types
{
<#
    List<String> Types = new List<String>
    {
        nameof(SByte),
        nameof(Byte),
        nameof(Int16),
        nameof(UInt16),
        nameof(Int32),
        nameof(UInt32),
        nameof(Int64),
        nameof(UInt64),
        nameof(Single),
        nameof(Double),
        nameof(Decimal)
    };

    void ForEach(IEnumerable<String> types, Action<String> action, Boolean line = true)
    {
        String[] type = types.ToArray();

        for (Int32 i = 0; i < type.Length; i++)
        {
            action(type[i]);

            if (line && i <= type.Length - 2)
            {
                WriteLine(String.Empty);
            }
        }
    }

    void TryReadImplementation(String type)
    {
        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveOptimization)]");
        WriteLine($"\t\tpublic static {nameof(Boolean)} {nameof(TryRead)}(this {nameof(BinaryReader)} reader, {(type == nameof(String) ? "[MaybeNullWhen(false)] " : String.Empty)}out {type} result)");
        WriteLine("\t\t{");
        WriteLine($"\t\t\treturn {nameof(TryRead)}{type}(reader, out result);");
        WriteLine("\t\t}");

        WriteLine(String.Empty);

        WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveOptimization)]");
        WriteLine($"\t\tpublic static {nameof(Boolean)} {nameof(TryRead)}{type}(this {nameof(BinaryReader)} reader, {(type == nameof(String) ? "[MaybeNullWhen(false)] " : String.Empty)}out {type} result)");
        WriteLine("\t\t{");
        WriteLine("\t\t\tif (reader is null)");
        WriteLine("\t\t\t{");
        WriteLine($"\t\t\t\tthrow new {nameof(ArgumentNullException)}(nameof(reader));");
        WriteLine("\t\t\t}");
        WriteLine(String.Empty);
        WriteLine("\t\t\ttry");
        WriteLine("\t\t\t{");
        WriteLine($"\t\t\t\tresult = reader.Read{type}();");
        WriteLine("\t\t\t\treturn true;");
        WriteLine("\t\t\t}");
        WriteLine("\t\t\tcatch (Exception)");
        WriteLine("\t\t\t{");
        WriteLine("\t\t\t\tresult = default;");
        WriteLine("\t\t\t\treturn false;");
        WriteLine("\t\t\t}");
        WriteLine("\t\t}");
    }

    void TryRead()
    {
        ForEach(Types.Prepend(nameof(Boolean)).Append(nameof(String)), TryReadImplementation);
    }
#>
    public static partial class BinaryReaderUtilities
    {
<#
    TryRead();
#>
    }
}