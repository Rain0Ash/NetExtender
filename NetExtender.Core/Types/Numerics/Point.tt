<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    List<String> types = new List<String>
    {
        nameof(Char),
        nameof(SByte),
        nameof(Byte),
        nameof(Int16),
        nameof(UInt16),
        nameof(Int32),
        nameof(UInt32),
        nameof(Int64),
        nameof(UInt64),
        nameof(Single),
        nameof(Double),
        nameof(Decimal)
    };

    String[] operators = {"+", "-", "*", "/", "%"};
    
    static Boolean IsUnsignedType(String type)
    {
        return type == nameof(Char) || type == nameof(Byte) || type == nameof(UInt16) || type == nameof(UInt32) || type == nameof(UInt64);
    }

    void Point()
    {
        foreach (String type in types)
        {
            Boolean small = type == nameof(Char) || type == nameof(Byte) || type == nameof(SByte) || type == nameof(Int16) || type == nameof(UInt16);
            Boolean unsigned = type == nameof(Char) || type == nameof(Byte) || type == nameof(UInt16) || type == nameof(UInt32) || type == nameof(UInt64);

            String name = $"{type}Point";
            WriteLine($"\tpublic readonly struct {name}");
            WriteLine("\t{");

            if (type == nameof(Int32) || type == nameof(Single) || type == nameof(Double))
            {
                String convert = type switch
                {
                    nameof(Int32) => "System.Drawing.Point",
                    nameof(Single) => "System.Numerics.Vector2",
                    _ => throw new NotSupportedException()
                };
                
                WriteLine($"\t\tpublic static implicit operator {name}({convert} point)");
                WriteLine("\t\t{");
                WriteLine($"\t\t\treturn new {name}(point.X, point.Y);");
                WriteLine("\t\t}");
                
                WriteLine(String.Empty);
                
                WriteLine($"\t\tpublic static implicit operator {convert}({name} point)");
                WriteLine("\t\t{");
                WriteLine($"\t\t\treturn new {convert}(point.X, point.Y);");
                WriteLine("\t\t}");
                
                WriteLine(String.Empty);
            }

            foreach (String @operator in operators)
            {
                WriteLine($"\t\tpublic static {name} operator {@operator}({name} first, {name} second)");
                WriteLine("\t\t{");
                if (small)
                {
                    WriteLine($"\t\t\tInt32 x = first.X {@operator} second.X;");
                    WriteLine($"\t\t\tInt32 y = first.Y {@operator} second.Y;");
                    WriteLine($"\t\t\treturn new {name}(Unsafe.As<Int32, {type}>(ref x), Unsafe.As<Int32, {type}>(ref y));");
                }
                else
                {
                    WriteLine($"\t\t\treturn new {name}(first.X {@operator} second.X, first.Y {@operator} second.Y);");
                }
                
                WriteLine("\t\t}");
                
                WriteLine(String.Empty);
            }

            WriteLine($"\t\tpublic {type} X {{ get; }}");
            WriteLine($"\t\tpublic {type} Y {{ get; }}");
            
            WriteLine(String.Empty);
            
            WriteLine($"\t\tpublic {name}({type} x, {type} y)");
            WriteLine("\t\t{");
            WriteLine("\t\t\tX = x;");
            WriteLine("\t\t\tY = y;");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            String cast = type == nameof(Char) ? $"({type})" : String.Empty;
            WriteLine($"\t\tpublic static {name} Zero {{ get; }} = new {name}({cast}0, {cast}0);");
            WriteLine($"\t\tpublic static {name} One {{ get; }} = new {name}({cast}1, {cast}1);");
            WriteLine($"\t\tpublic static {name} Minimum {{ get; }} = new {name}({type}.MinValue, {type}.MinValue);");
            WriteLine($"\t\tpublic static {name} Maximum {{ get; }} = new {name}({type}.MaxValue, {type}.MaxValue);");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {name} Offset({name} point)");
            WriteLine("\t\t{");
            WriteLine("\t\t\treturn this + point;");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {name} Offset({type} x, {type} y)");
            WriteLine("\t\t{");
            WriteLine($"\t\t\treturn this + new {name}(x, y);");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine($"\t\tpublic {name} Offset(PointOffset offset, {type} count = {cast}1)");
            WriteLine("\t\t{");
            WriteLine($"\t\t\tif (count == {cast}0)");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t\treturn this;");
            WriteLine("\t\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t\treturn offset switch");
            WriteLine("\t\t\t{");
            WriteLine("\t\t\t\tPointOffset.None => this,");
            WriteLine($"\t\t\t\tPointOffset.Up => this - new {name}({cast}0, count),");
            WriteLine($"\t\t\t\tPointOffset.Down => this + new {name}({cast}0, count),");
            WriteLine($"\t\t\t\tPointOffset.Left => this - new {name}(count, {cast}0),");
            WriteLine($"\t\t\t\tPointOffset.Right => this + new {name}(count, {cast}0),");
            WriteLine($"\t\t\t\tPointOffset.UpLeft => this - new {name}(count, count),");
            WriteLine($"\t\t\t\tPointOffset.DownLeft => this + new {name}({cast}0, count) - new {name}(count, {cast}0),");
            WriteLine($"\t\t\t\tPointOffset.UpRight => this - new {name}({cast}0, count) + new {name}(count, {cast}0),");
            WriteLine($"\t\t\t\tPointOffset.DownRight => this + new {name}(count, count),");
            WriteLine("\t\t\t\t_ => throw new ArgumentOutOfRangeException(nameof(offset), offset, null)");
            WriteLine("\t\t\t};");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {name} Delta({name} point)");
            WriteLine("\t\t{");
            WriteLine("\t\t\treturn this - point;");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {name} Delta({type} count)");
            WriteLine("\t\t{");
            WriteLine($"\t\t\treturn this - new {name}(count, count);");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {name} Delta({type} x, {type} y)");
            WriteLine("\t\t{");
            WriteLine($"\t\t\treturn this - new {name}(x, y);");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine("\t\t[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"\t\tpublic {(IsUnsignedType(type) ? "static " : String.Empty)}{nameof(Boolean)} IsPositive()");
            WriteLine("\t\t{");
            WriteLine($"\t\t\treturn {(unsigned ? "true" : $"X >= {cast}0 && Y >= {cast}0")};");
            WriteLine("\t\t}");
            
            WriteLine(String.Empty);
            
            WriteLine($"\t\tpublic override {nameof(String)} ToString()");
            WriteLine("\t\t{");
            WriteLine("\t\t\treturn $\"{{X={X}, Y={Y}}}\";");
            WriteLine("\t\t}");

            WriteLine("\t}");

            if (type != types[types.Count - 1])
            {
                WriteLine(String.Empty);
            }
        }
    }

#>
// This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com

using System;
using System.Runtime.CompilerServices;

namespace NetExtender.Types.Numerics
{
<#
    Point();
#>
}